# 11052: 카드 구매하기
#
# 카드를 N개 구매하는데 필요한 최대 가격은
# 카드를 N-1개, N-2개, N-3개...1개 구매할 때의 가격을 이용해 구할 수 있다.
#
# 카드를 N-1개 구매한 가격에 카드를 1개 구매하는 가격을 더하면 카드를 N개 구매하는데 소요되는 가격이 나온다.
# 같은 논리로, 카드를 1개 구매한 가격에 카드를 N-1개 구매하는 가격을 더하면 카드를 N개 구매하는데 소요되는 가격이 나온다.
#
# 이렇게 1부터 N-1개의 카드를 구매하는 가격에 카드를 N-1개부터 1개 구매하는 가격을 더해서
# 카드를 N개 구매할 때 소요되는 가격의 모든 경우의 수를 구할 수 있고, 이들 중 최대값을 고르면된다.
#
# 시간 복잡도는 O(N^2)가 되지만, 주어진 데이터의 최대 개수가 1000개로
# 최대 연산수가 1,000,000회 이기 떄문에 1초 안에 해결 가능하다.

N = int(input())
prices = list(map(int, input().split()))
DP = [0 for _ in range(N)]

for i in range(N):
    DP[i] = prices[i]
    for j in range(i):
        # (카드 N-i개를 구매한 최대 가격 + 카드 i개를 구매하는 가격)과
        # 카드 N개를 구매한 현재의 최대 가격을 비교해, 더 큰 값을 DP[i]에 넣는다.
        DP[i] = max(DP[i], DP[j] + prices[i - j - 1])

print(DP[N - 1])
